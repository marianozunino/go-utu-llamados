// Code generated by ent, DO NOT EDIT.

package searchinput

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the searchinput type in the database.
	Label = "search_input"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSearch holds the string denoting the search field in the database.
	FieldSearch = "search"
	// EdgeSearchResults holds the string denoting the search_results edge name in mutations.
	EdgeSearchResults = "search_results"
	// Table holds the table name of the searchinput in the database.
	Table = "search_inputs"
	// SearchResultsTable is the table that holds the search_results relation/edge. The primary key declared below.
	SearchResultsTable = "search_input_search_results"
	// SearchResultsInverseTable is the table name for the JobOffer entity.
	// It exists in this package in order to avoid circular dependency with the "joboffer" package.
	SearchResultsInverseTable = "job_offers"
)

// Columns holds all SQL columns for searchinput fields.
var Columns = []string{
	FieldID,
	FieldSearch,
}

var (
	// SearchResultsPrimaryKey and SearchResultsColumn2 are the table columns denoting the
	// primary key for the search_results relation (M2M).
	SearchResultsPrimaryKey = []string{"search_input_id", "job_offer_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SearchInput queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySearch orders the results by the search field.
func BySearch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSearch, opts...).ToFunc()
}

// BySearchResultsCount orders the results by search_results count.
func BySearchResultsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSearchResultsStep(), opts...)
	}
}

// BySearchResults orders the results by search_results terms.
func BySearchResults(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSearchResultsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSearchResultsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SearchResultsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SearchResultsTable, SearchResultsPrimaryKey...),
	)
}
