// Code generated by ent, DO NOT EDIT.

package searchinput

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/marianozunino/go-utu-llamados/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldLTE(FieldID, id))
}

// Search applies equality check predicate on the "search" field. It's identical to SearchEQ.
func Search(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldEQ(FieldSearch, v))
}

// SearchEQ applies the EQ predicate on the "search" field.
func SearchEQ(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldEQ(FieldSearch, v))
}

// SearchNEQ applies the NEQ predicate on the "search" field.
func SearchNEQ(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldNEQ(FieldSearch, v))
}

// SearchIn applies the In predicate on the "search" field.
func SearchIn(vs ...string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldIn(FieldSearch, vs...))
}

// SearchNotIn applies the NotIn predicate on the "search" field.
func SearchNotIn(vs ...string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldNotIn(FieldSearch, vs...))
}

// SearchGT applies the GT predicate on the "search" field.
func SearchGT(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldGT(FieldSearch, v))
}

// SearchGTE applies the GTE predicate on the "search" field.
func SearchGTE(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldGTE(FieldSearch, v))
}

// SearchLT applies the LT predicate on the "search" field.
func SearchLT(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldLT(FieldSearch, v))
}

// SearchLTE applies the LTE predicate on the "search" field.
func SearchLTE(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldLTE(FieldSearch, v))
}

// SearchContains applies the Contains predicate on the "search" field.
func SearchContains(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldContains(FieldSearch, v))
}

// SearchHasPrefix applies the HasPrefix predicate on the "search" field.
func SearchHasPrefix(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldHasPrefix(FieldSearch, v))
}

// SearchHasSuffix applies the HasSuffix predicate on the "search" field.
func SearchHasSuffix(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldHasSuffix(FieldSearch, v))
}

// SearchEqualFold applies the EqualFold predicate on the "search" field.
func SearchEqualFold(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldEqualFold(FieldSearch, v))
}

// SearchContainsFold applies the ContainsFold predicate on the "search" field.
func SearchContainsFold(v string) predicate.SearchInput {
	return predicate.SearchInput(sql.FieldContainsFold(FieldSearch, v))
}

// HasSearchResults applies the HasEdge predicate on the "search_results" edge.
func HasSearchResults() predicate.SearchInput {
	return predicate.SearchInput(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SearchResultsTable, SearchResultsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSearchResultsWith applies the HasEdge predicate on the "search_results" edge with a given conditions (other predicates).
func HasSearchResultsWith(preds ...predicate.JobOffer) predicate.SearchInput {
	return predicate.SearchInput(func(s *sql.Selector) {
		step := newSearchResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SearchInput) predicate.SearchInput {
	return predicate.SearchInput(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SearchInput) predicate.SearchInput {
	return predicate.SearchInput(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SearchInput) predicate.SearchInput {
	return predicate.SearchInput(func(s *sql.Selector) {
		p(s.Not())
	})
}
