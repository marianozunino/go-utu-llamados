// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marianozunino/go-utu-llamados/ent/joboffer"
	"github.com/marianozunino/go-utu-llamados/ent/predicate"
	"github.com/marianozunino/go-utu-llamados/ent/searchinput"
)

// JobOfferUpdate is the builder for updating JobOffer entities.
type JobOfferUpdate struct {
	config
	hooks    []Hook
	mutation *JobOfferMutation
}

// Where appends a list predicates to the JobOfferUpdate builder.
func (jou *JobOfferUpdate) Where(ps ...predicate.JobOffer) *JobOfferUpdate {
	jou.mutation.Where(ps...)
	return jou
}

// SetTitle sets the "title" field.
func (jou *JobOfferUpdate) SetTitle(s string) *JobOfferUpdate {
	jou.mutation.SetTitle(s)
	return jou
}

// SetDescription sets the "description" field.
func (jou *JobOfferUpdate) SetDescription(s string) *JobOfferUpdate {
	jou.mutation.SetDescription(s)
	return jou
}

// SetURL sets the "url" field.
func (jou *JobOfferUpdate) SetURL(s string) *JobOfferUpdate {
	jou.mutation.SetURL(s)
	return jou
}

// SetFileURL sets the "file_url" field.
func (jou *JobOfferUpdate) SetFileURL(s string) *JobOfferUpdate {
	jou.mutation.SetFileURL(s)
	return jou
}

// SetPublishedAt sets the "published_at" field.
func (jou *JobOfferUpdate) SetPublishedAt(t time.Time) *JobOfferUpdate {
	jou.mutation.SetPublishedAt(t)
	return jou
}

// SetUpdatedAt sets the "updated_at" field.
func (jou *JobOfferUpdate) SetUpdatedAt(t time.Time) *JobOfferUpdate {
	jou.mutation.SetUpdatedAt(t)
	return jou
}

// AddSearchInputIDs adds the "search_inputs" edge to the SearchInput entity by IDs.
func (jou *JobOfferUpdate) AddSearchInputIDs(ids ...int) *JobOfferUpdate {
	jou.mutation.AddSearchInputIDs(ids...)
	return jou
}

// AddSearchInputs adds the "search_inputs" edges to the SearchInput entity.
func (jou *JobOfferUpdate) AddSearchInputs(s ...*SearchInput) *JobOfferUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jou.AddSearchInputIDs(ids...)
}

// Mutation returns the JobOfferMutation object of the builder.
func (jou *JobOfferUpdate) Mutation() *JobOfferMutation {
	return jou.mutation
}

// ClearSearchInputs clears all "search_inputs" edges to the SearchInput entity.
func (jou *JobOfferUpdate) ClearSearchInputs() *JobOfferUpdate {
	jou.mutation.ClearSearchInputs()
	return jou
}

// RemoveSearchInputIDs removes the "search_inputs" edge to SearchInput entities by IDs.
func (jou *JobOfferUpdate) RemoveSearchInputIDs(ids ...int) *JobOfferUpdate {
	jou.mutation.RemoveSearchInputIDs(ids...)
	return jou
}

// RemoveSearchInputs removes "search_inputs" edges to SearchInput entities.
func (jou *JobOfferUpdate) RemoveSearchInputs(s ...*SearchInput) *JobOfferUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jou.RemoveSearchInputIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jou *JobOfferUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, jou.sqlSave, jou.mutation, jou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jou *JobOfferUpdate) SaveX(ctx context.Context) int {
	affected, err := jou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jou *JobOfferUpdate) Exec(ctx context.Context) error {
	_, err := jou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jou *JobOfferUpdate) ExecX(ctx context.Context) {
	if err := jou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jou *JobOfferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(joboffer.Table, joboffer.Columns, sqlgraph.NewFieldSpec(joboffer.FieldID, field.TypeInt))
	if ps := jou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jou.mutation.Title(); ok {
		_spec.SetField(joboffer.FieldTitle, field.TypeString, value)
	}
	if value, ok := jou.mutation.Description(); ok {
		_spec.SetField(joboffer.FieldDescription, field.TypeString, value)
	}
	if value, ok := jou.mutation.URL(); ok {
		_spec.SetField(joboffer.FieldURL, field.TypeString, value)
	}
	if value, ok := jou.mutation.FileURL(); ok {
		_spec.SetField(joboffer.FieldFileURL, field.TypeString, value)
	}
	if value, ok := jou.mutation.PublishedAt(); ok {
		_spec.SetField(joboffer.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := jou.mutation.UpdatedAt(); ok {
		_spec.SetField(joboffer.FieldUpdatedAt, field.TypeTime, value)
	}
	if jou.mutation.SearchInputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   joboffer.SearchInputsTable,
			Columns: joboffer.SearchInputsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchinput.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jou.mutation.RemovedSearchInputsIDs(); len(nodes) > 0 && !jou.mutation.SearchInputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   joboffer.SearchInputsTable,
			Columns: joboffer.SearchInputsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchinput.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jou.mutation.SearchInputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   joboffer.SearchInputsTable,
			Columns: joboffer.SearchInputsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchinput.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{joboffer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jou.mutation.done = true
	return n, nil
}

// JobOfferUpdateOne is the builder for updating a single JobOffer entity.
type JobOfferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobOfferMutation
}

// SetTitle sets the "title" field.
func (jouo *JobOfferUpdateOne) SetTitle(s string) *JobOfferUpdateOne {
	jouo.mutation.SetTitle(s)
	return jouo
}

// SetDescription sets the "description" field.
func (jouo *JobOfferUpdateOne) SetDescription(s string) *JobOfferUpdateOne {
	jouo.mutation.SetDescription(s)
	return jouo
}

// SetURL sets the "url" field.
func (jouo *JobOfferUpdateOne) SetURL(s string) *JobOfferUpdateOne {
	jouo.mutation.SetURL(s)
	return jouo
}

// SetFileURL sets the "file_url" field.
func (jouo *JobOfferUpdateOne) SetFileURL(s string) *JobOfferUpdateOne {
	jouo.mutation.SetFileURL(s)
	return jouo
}

// SetPublishedAt sets the "published_at" field.
func (jouo *JobOfferUpdateOne) SetPublishedAt(t time.Time) *JobOfferUpdateOne {
	jouo.mutation.SetPublishedAt(t)
	return jouo
}

// SetUpdatedAt sets the "updated_at" field.
func (jouo *JobOfferUpdateOne) SetUpdatedAt(t time.Time) *JobOfferUpdateOne {
	jouo.mutation.SetUpdatedAt(t)
	return jouo
}

// AddSearchInputIDs adds the "search_inputs" edge to the SearchInput entity by IDs.
func (jouo *JobOfferUpdateOne) AddSearchInputIDs(ids ...int) *JobOfferUpdateOne {
	jouo.mutation.AddSearchInputIDs(ids...)
	return jouo
}

// AddSearchInputs adds the "search_inputs" edges to the SearchInput entity.
func (jouo *JobOfferUpdateOne) AddSearchInputs(s ...*SearchInput) *JobOfferUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jouo.AddSearchInputIDs(ids...)
}

// Mutation returns the JobOfferMutation object of the builder.
func (jouo *JobOfferUpdateOne) Mutation() *JobOfferMutation {
	return jouo.mutation
}

// ClearSearchInputs clears all "search_inputs" edges to the SearchInput entity.
func (jouo *JobOfferUpdateOne) ClearSearchInputs() *JobOfferUpdateOne {
	jouo.mutation.ClearSearchInputs()
	return jouo
}

// RemoveSearchInputIDs removes the "search_inputs" edge to SearchInput entities by IDs.
func (jouo *JobOfferUpdateOne) RemoveSearchInputIDs(ids ...int) *JobOfferUpdateOne {
	jouo.mutation.RemoveSearchInputIDs(ids...)
	return jouo
}

// RemoveSearchInputs removes "search_inputs" edges to SearchInput entities.
func (jouo *JobOfferUpdateOne) RemoveSearchInputs(s ...*SearchInput) *JobOfferUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jouo.RemoveSearchInputIDs(ids...)
}

// Where appends a list predicates to the JobOfferUpdate builder.
func (jouo *JobOfferUpdateOne) Where(ps ...predicate.JobOffer) *JobOfferUpdateOne {
	jouo.mutation.Where(ps...)
	return jouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jouo *JobOfferUpdateOne) Select(field string, fields ...string) *JobOfferUpdateOne {
	jouo.fields = append([]string{field}, fields...)
	return jouo
}

// Save executes the query and returns the updated JobOffer entity.
func (jouo *JobOfferUpdateOne) Save(ctx context.Context) (*JobOffer, error) {
	return withHooks(ctx, jouo.sqlSave, jouo.mutation, jouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jouo *JobOfferUpdateOne) SaveX(ctx context.Context) *JobOffer {
	node, err := jouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jouo *JobOfferUpdateOne) Exec(ctx context.Context) error {
	_, err := jouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jouo *JobOfferUpdateOne) ExecX(ctx context.Context) {
	if err := jouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jouo *JobOfferUpdateOne) sqlSave(ctx context.Context) (_node *JobOffer, err error) {
	_spec := sqlgraph.NewUpdateSpec(joboffer.Table, joboffer.Columns, sqlgraph.NewFieldSpec(joboffer.FieldID, field.TypeInt))
	id, ok := jouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobOffer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, joboffer.FieldID)
		for _, f := range fields {
			if !joboffer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != joboffer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jouo.mutation.Title(); ok {
		_spec.SetField(joboffer.FieldTitle, field.TypeString, value)
	}
	if value, ok := jouo.mutation.Description(); ok {
		_spec.SetField(joboffer.FieldDescription, field.TypeString, value)
	}
	if value, ok := jouo.mutation.URL(); ok {
		_spec.SetField(joboffer.FieldURL, field.TypeString, value)
	}
	if value, ok := jouo.mutation.FileURL(); ok {
		_spec.SetField(joboffer.FieldFileURL, field.TypeString, value)
	}
	if value, ok := jouo.mutation.PublishedAt(); ok {
		_spec.SetField(joboffer.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := jouo.mutation.UpdatedAt(); ok {
		_spec.SetField(joboffer.FieldUpdatedAt, field.TypeTime, value)
	}
	if jouo.mutation.SearchInputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   joboffer.SearchInputsTable,
			Columns: joboffer.SearchInputsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchinput.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jouo.mutation.RemovedSearchInputsIDs(); len(nodes) > 0 && !jouo.mutation.SearchInputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   joboffer.SearchInputsTable,
			Columns: joboffer.SearchInputsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchinput.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jouo.mutation.SearchInputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   joboffer.SearchInputsTable,
			Columns: joboffer.SearchInputsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchinput.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobOffer{config: jouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{joboffer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jouo.mutation.done = true
	return _node, nil
}
