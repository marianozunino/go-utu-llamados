// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/marianozunino/go-utu-llamados/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/marianozunino/go-utu-llamados/ent/joboffer"
	"github.com/marianozunino/go-utu-llamados/ent/searchinput"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// JobOffer is the client for interacting with the JobOffer builders.
	JobOffer *JobOfferClient
	// SearchInput is the client for interacting with the SearchInput builders.
	SearchInput *SearchInputClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.JobOffer = NewJobOfferClient(c.config)
	c.SearchInput = NewSearchInputClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		JobOffer:    NewJobOfferClient(cfg),
		SearchInput: NewSearchInputClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		JobOffer:    NewJobOfferClient(cfg),
		SearchInput: NewSearchInputClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		JobOffer.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.JobOffer.Use(hooks...)
	c.SearchInput.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.JobOffer.Intercept(interceptors...)
	c.SearchInput.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *JobOfferMutation:
		return c.JobOffer.mutate(ctx, m)
	case *SearchInputMutation:
		return c.SearchInput.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// JobOfferClient is a client for the JobOffer schema.
type JobOfferClient struct {
	config
}

// NewJobOfferClient returns a client for the JobOffer from the given config.
func NewJobOfferClient(c config) *JobOfferClient {
	return &JobOfferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `joboffer.Hooks(f(g(h())))`.
func (c *JobOfferClient) Use(hooks ...Hook) {
	c.hooks.JobOffer = append(c.hooks.JobOffer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `joboffer.Intercept(f(g(h())))`.
func (c *JobOfferClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobOffer = append(c.inters.JobOffer, interceptors...)
}

// Create returns a builder for creating a JobOffer entity.
func (c *JobOfferClient) Create() *JobOfferCreate {
	mutation := newJobOfferMutation(c.config, OpCreate)
	return &JobOfferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobOffer entities.
func (c *JobOfferClient) CreateBulk(builders ...*JobOfferCreate) *JobOfferCreateBulk {
	return &JobOfferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobOffer.
func (c *JobOfferClient) Update() *JobOfferUpdate {
	mutation := newJobOfferMutation(c.config, OpUpdate)
	return &JobOfferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobOfferClient) UpdateOne(jo *JobOffer) *JobOfferUpdateOne {
	mutation := newJobOfferMutation(c.config, OpUpdateOne, withJobOffer(jo))
	return &JobOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobOfferClient) UpdateOneID(id int) *JobOfferUpdateOne {
	mutation := newJobOfferMutation(c.config, OpUpdateOne, withJobOfferID(id))
	return &JobOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobOffer.
func (c *JobOfferClient) Delete() *JobOfferDelete {
	mutation := newJobOfferMutation(c.config, OpDelete)
	return &JobOfferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobOfferClient) DeleteOne(jo *JobOffer) *JobOfferDeleteOne {
	return c.DeleteOneID(jo.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobOfferClient) DeleteOneID(id int) *JobOfferDeleteOne {
	builder := c.Delete().Where(joboffer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobOfferDeleteOne{builder}
}

// Query returns a query builder for JobOffer.
func (c *JobOfferClient) Query() *JobOfferQuery {
	return &JobOfferQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobOffer},
		inters: c.Interceptors(),
	}
}

// Get returns a JobOffer entity by its id.
func (c *JobOfferClient) Get(ctx context.Context, id int) (*JobOffer, error) {
	return c.Query().Where(joboffer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobOfferClient) GetX(ctx context.Context, id int) *JobOffer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySearchInputs queries the search_inputs edge of a JobOffer.
func (c *JobOfferClient) QuerySearchInputs(jo *JobOffer) *SearchInputQuery {
	query := (&SearchInputClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(joboffer.Table, joboffer.FieldID, id),
			sqlgraph.To(searchinput.Table, searchinput.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, joboffer.SearchInputsTable, joboffer.SearchInputsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(jo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobOfferClient) Hooks() []Hook {
	return c.hooks.JobOffer
}

// Interceptors returns the client interceptors.
func (c *JobOfferClient) Interceptors() []Interceptor {
	return c.inters.JobOffer
}

func (c *JobOfferClient) mutate(ctx context.Context, m *JobOfferMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobOfferCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobOfferUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobOfferDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobOffer mutation op: %q", m.Op())
	}
}

// SearchInputClient is a client for the SearchInput schema.
type SearchInputClient struct {
	config
}

// NewSearchInputClient returns a client for the SearchInput from the given config.
func NewSearchInputClient(c config) *SearchInputClient {
	return &SearchInputClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `searchinput.Hooks(f(g(h())))`.
func (c *SearchInputClient) Use(hooks ...Hook) {
	c.hooks.SearchInput = append(c.hooks.SearchInput, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `searchinput.Intercept(f(g(h())))`.
func (c *SearchInputClient) Intercept(interceptors ...Interceptor) {
	c.inters.SearchInput = append(c.inters.SearchInput, interceptors...)
}

// Create returns a builder for creating a SearchInput entity.
func (c *SearchInputClient) Create() *SearchInputCreate {
	mutation := newSearchInputMutation(c.config, OpCreate)
	return &SearchInputCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SearchInput entities.
func (c *SearchInputClient) CreateBulk(builders ...*SearchInputCreate) *SearchInputCreateBulk {
	return &SearchInputCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SearchInput.
func (c *SearchInputClient) Update() *SearchInputUpdate {
	mutation := newSearchInputMutation(c.config, OpUpdate)
	return &SearchInputUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SearchInputClient) UpdateOne(si *SearchInput) *SearchInputUpdateOne {
	mutation := newSearchInputMutation(c.config, OpUpdateOne, withSearchInput(si))
	return &SearchInputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SearchInputClient) UpdateOneID(id int) *SearchInputUpdateOne {
	mutation := newSearchInputMutation(c.config, OpUpdateOne, withSearchInputID(id))
	return &SearchInputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SearchInput.
func (c *SearchInputClient) Delete() *SearchInputDelete {
	mutation := newSearchInputMutation(c.config, OpDelete)
	return &SearchInputDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SearchInputClient) DeleteOne(si *SearchInput) *SearchInputDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SearchInputClient) DeleteOneID(id int) *SearchInputDeleteOne {
	builder := c.Delete().Where(searchinput.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SearchInputDeleteOne{builder}
}

// Query returns a query builder for SearchInput.
func (c *SearchInputClient) Query() *SearchInputQuery {
	return &SearchInputQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSearchInput},
		inters: c.Interceptors(),
	}
}

// Get returns a SearchInput entity by its id.
func (c *SearchInputClient) Get(ctx context.Context, id int) (*SearchInput, error) {
	return c.Query().Where(searchinput.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SearchInputClient) GetX(ctx context.Context, id int) *SearchInput {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySearchResults queries the search_results edge of a SearchInput.
func (c *SearchInputClient) QuerySearchResults(si *SearchInput) *JobOfferQuery {
	query := (&JobOfferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(searchinput.Table, searchinput.FieldID, id),
			sqlgraph.To(joboffer.Table, joboffer.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, searchinput.SearchResultsTable, searchinput.SearchResultsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SearchInputClient) Hooks() []Hook {
	return c.hooks.SearchInput
}

// Interceptors returns the client interceptors.
func (c *SearchInputClient) Interceptors() []Interceptor {
	return c.inters.SearchInput
}

func (c *SearchInputClient) mutate(ctx context.Context, m *SearchInputMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SearchInputCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SearchInputUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SearchInputUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SearchInputDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SearchInput mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		JobOffer, SearchInput []ent.Hook
	}
	inters struct {
		JobOffer, SearchInput []ent.Interceptor
	}
)
