// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marianozunino/go-utu-llamados/ent/joboffer"
	"github.com/marianozunino/go-utu-llamados/ent/searchinput"
)

// SearchInputCreate is the builder for creating a SearchInput entity.
type SearchInputCreate struct {
	config
	mutation *SearchInputMutation
	hooks    []Hook
}

// SetSearch sets the "search" field.
func (sic *SearchInputCreate) SetSearch(s string) *SearchInputCreate {
	sic.mutation.SetSearch(s)
	return sic
}

// AddSearchResultIDs adds the "search_results" edge to the JobOffer entity by IDs.
func (sic *SearchInputCreate) AddSearchResultIDs(ids ...int) *SearchInputCreate {
	sic.mutation.AddSearchResultIDs(ids...)
	return sic
}

// AddSearchResults adds the "search_results" edges to the JobOffer entity.
func (sic *SearchInputCreate) AddSearchResults(j ...*JobOffer) *SearchInputCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return sic.AddSearchResultIDs(ids...)
}

// Mutation returns the SearchInputMutation object of the builder.
func (sic *SearchInputCreate) Mutation() *SearchInputMutation {
	return sic.mutation
}

// Save creates the SearchInput in the database.
func (sic *SearchInputCreate) Save(ctx context.Context) (*SearchInput, error) {
	return withHooks(ctx, sic.sqlSave, sic.mutation, sic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sic *SearchInputCreate) SaveX(ctx context.Context) *SearchInput {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sic *SearchInputCreate) Exec(ctx context.Context) error {
	_, err := sic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sic *SearchInputCreate) ExecX(ctx context.Context) {
	if err := sic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sic *SearchInputCreate) check() error {
	if _, ok := sic.mutation.Search(); !ok {
		return &ValidationError{Name: "search", err: errors.New(`ent: missing required field "SearchInput.search"`)}
	}
	return nil
}

func (sic *SearchInputCreate) sqlSave(ctx context.Context) (*SearchInput, error) {
	if err := sic.check(); err != nil {
		return nil, err
	}
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sic.mutation.id = &_node.ID
	sic.mutation.done = true
	return _node, nil
}

func (sic *SearchInputCreate) createSpec() (*SearchInput, *sqlgraph.CreateSpec) {
	var (
		_node = &SearchInput{config: sic.config}
		_spec = sqlgraph.NewCreateSpec(searchinput.Table, sqlgraph.NewFieldSpec(searchinput.FieldID, field.TypeInt))
	)
	if value, ok := sic.mutation.Search(); ok {
		_spec.SetField(searchinput.FieldSearch, field.TypeString, value)
		_node.Search = value
	}
	if nodes := sic.mutation.SearchResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   searchinput.SearchResultsTable,
			Columns: searchinput.SearchResultsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joboffer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SearchInputCreateBulk is the builder for creating many SearchInput entities in bulk.
type SearchInputCreateBulk struct {
	config
	builders []*SearchInputCreate
}

// Save creates the SearchInput entities in the database.
func (sicb *SearchInputCreateBulk) Save(ctx context.Context) ([]*SearchInput, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*SearchInput, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SearchInputMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sicb *SearchInputCreateBulk) SaveX(ctx context.Context) []*SearchInput {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sicb *SearchInputCreateBulk) Exec(ctx context.Context) error {
	_, err := sicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sicb *SearchInputCreateBulk) ExecX(ctx context.Context) {
	if err := sicb.Exec(ctx); err != nil {
		panic(err)
	}
}
