// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marianozunino/go-utu-llamados/ent/joboffer"
	"github.com/marianozunino/go-utu-llamados/ent/searchinput"
)

// JobOfferCreate is the builder for creating a JobOffer entity.
type JobOfferCreate struct {
	config
	mutation *JobOfferMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (joc *JobOfferCreate) SetTitle(s string) *JobOfferCreate {
	joc.mutation.SetTitle(s)
	return joc
}

// SetDescription sets the "description" field.
func (joc *JobOfferCreate) SetDescription(s string) *JobOfferCreate {
	joc.mutation.SetDescription(s)
	return joc
}

// SetURL sets the "url" field.
func (joc *JobOfferCreate) SetURL(s string) *JobOfferCreate {
	joc.mutation.SetURL(s)
	return joc
}

// SetFileURL sets the "file_url" field.
func (joc *JobOfferCreate) SetFileURL(s string) *JobOfferCreate {
	joc.mutation.SetFileURL(s)
	return joc
}

// SetPublishedAt sets the "published_at" field.
func (joc *JobOfferCreate) SetPublishedAt(t time.Time) *JobOfferCreate {
	joc.mutation.SetPublishedAt(t)
	return joc
}

// SetUpdatedAt sets the "updated_at" field.
func (joc *JobOfferCreate) SetUpdatedAt(t time.Time) *JobOfferCreate {
	joc.mutation.SetUpdatedAt(t)
	return joc
}

// AddSearchInputIDs adds the "search_inputs" edge to the SearchInput entity by IDs.
func (joc *JobOfferCreate) AddSearchInputIDs(ids ...int) *JobOfferCreate {
	joc.mutation.AddSearchInputIDs(ids...)
	return joc
}

// AddSearchInputs adds the "search_inputs" edges to the SearchInput entity.
func (joc *JobOfferCreate) AddSearchInputs(s ...*SearchInput) *JobOfferCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return joc.AddSearchInputIDs(ids...)
}

// Mutation returns the JobOfferMutation object of the builder.
func (joc *JobOfferCreate) Mutation() *JobOfferMutation {
	return joc.mutation
}

// Save creates the JobOffer in the database.
func (joc *JobOfferCreate) Save(ctx context.Context) (*JobOffer, error) {
	return withHooks(ctx, joc.sqlSave, joc.mutation, joc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (joc *JobOfferCreate) SaveX(ctx context.Context) *JobOffer {
	v, err := joc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (joc *JobOfferCreate) Exec(ctx context.Context) error {
	_, err := joc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (joc *JobOfferCreate) ExecX(ctx context.Context) {
	if err := joc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (joc *JobOfferCreate) check() error {
	if _, ok := joc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "JobOffer.title"`)}
	}
	if _, ok := joc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "JobOffer.description"`)}
	}
	if _, ok := joc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "JobOffer.url"`)}
	}
	if _, ok := joc.mutation.FileURL(); !ok {
		return &ValidationError{Name: "file_url", err: errors.New(`ent: missing required field "JobOffer.file_url"`)}
	}
	if _, ok := joc.mutation.PublishedAt(); !ok {
		return &ValidationError{Name: "published_at", err: errors.New(`ent: missing required field "JobOffer.published_at"`)}
	}
	if _, ok := joc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "JobOffer.updated_at"`)}
	}
	return nil
}

func (joc *JobOfferCreate) sqlSave(ctx context.Context) (*JobOffer, error) {
	if err := joc.check(); err != nil {
		return nil, err
	}
	_node, _spec := joc.createSpec()
	if err := sqlgraph.CreateNode(ctx, joc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	joc.mutation.id = &_node.ID
	joc.mutation.done = true
	return _node, nil
}

func (joc *JobOfferCreate) createSpec() (*JobOffer, *sqlgraph.CreateSpec) {
	var (
		_node = &JobOffer{config: joc.config}
		_spec = sqlgraph.NewCreateSpec(joboffer.Table, sqlgraph.NewFieldSpec(joboffer.FieldID, field.TypeInt))
	)
	if value, ok := joc.mutation.Title(); ok {
		_spec.SetField(joboffer.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := joc.mutation.Description(); ok {
		_spec.SetField(joboffer.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := joc.mutation.URL(); ok {
		_spec.SetField(joboffer.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := joc.mutation.FileURL(); ok {
		_spec.SetField(joboffer.FieldFileURL, field.TypeString, value)
		_node.FileURL = value
	}
	if value, ok := joc.mutation.PublishedAt(); ok {
		_spec.SetField(joboffer.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if value, ok := joc.mutation.UpdatedAt(); ok {
		_spec.SetField(joboffer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := joc.mutation.SearchInputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   joboffer.SearchInputsTable,
			Columns: joboffer.SearchInputsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchinput.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobOfferCreateBulk is the builder for creating many JobOffer entities in bulk.
type JobOfferCreateBulk struct {
	config
	builders []*JobOfferCreate
}

// Save creates the JobOffer entities in the database.
func (jocb *JobOfferCreateBulk) Save(ctx context.Context) ([]*JobOffer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jocb.builders))
	nodes := make([]*JobOffer, len(jocb.builders))
	mutators := make([]Mutator, len(jocb.builders))
	for i := range jocb.builders {
		func(i int, root context.Context) {
			builder := jocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobOfferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jocb *JobOfferCreateBulk) SaveX(ctx context.Context) []*JobOffer {
	v, err := jocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jocb *JobOfferCreateBulk) Exec(ctx context.Context) error {
	_, err := jocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jocb *JobOfferCreateBulk) ExecX(ctx context.Context) {
	if err := jocb.Exec(ctx); err != nil {
		panic(err)
	}
}
