// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/marianozunino/go-utu-llamados/ent/joboffer"
)

// JobOffer is the model entity for the JobOffer schema.
type JobOffer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// FileURL holds the value of the "file_url" field.
	FileURL string `json:"file_url,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobOfferQuery when eager-loading is set.
	Edges        JobOfferEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobOfferEdges holds the relations/edges for other nodes in the graph.
type JobOfferEdges struct {
	// SearchInputs holds the value of the search_inputs edge.
	SearchInputs []*SearchInput `json:"search_inputs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SearchInputsOrErr returns the SearchInputs value or an error if the edge
// was not loaded in eager-loading.
func (e JobOfferEdges) SearchInputsOrErr() ([]*SearchInput, error) {
	if e.loadedTypes[0] {
		return e.SearchInputs, nil
	}
	return nil, &NotLoadedError{edge: "search_inputs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobOffer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case joboffer.FieldID:
			values[i] = new(sql.NullInt64)
		case joboffer.FieldTitle, joboffer.FieldDescription, joboffer.FieldURL, joboffer.FieldFileURL:
			values[i] = new(sql.NullString)
		case joboffer.FieldPublishedAt, joboffer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobOffer fields.
func (jo *JobOffer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case joboffer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jo.ID = int(value.Int64)
		case joboffer.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				jo.Title = value.String
			}
		case joboffer.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				jo.Description = value.String
			}
		case joboffer.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				jo.URL = value.String
			}
		case joboffer.FieldFileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_url", values[i])
			} else if value.Valid {
				jo.FileURL = value.String
			}
		case joboffer.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				jo.PublishedAt = value.Time
			}
		case joboffer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jo.UpdatedAt = value.Time
			}
		default:
			jo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobOffer.
// This includes values selected through modifiers, order, etc.
func (jo *JobOffer) Value(name string) (ent.Value, error) {
	return jo.selectValues.Get(name)
}

// QuerySearchInputs queries the "search_inputs" edge of the JobOffer entity.
func (jo *JobOffer) QuerySearchInputs() *SearchInputQuery {
	return NewJobOfferClient(jo.config).QuerySearchInputs(jo)
}

// Update returns a builder for updating this JobOffer.
// Note that you need to call JobOffer.Unwrap() before calling this method if this JobOffer
// was returned from a transaction, and the transaction was committed or rolled back.
func (jo *JobOffer) Update() *JobOfferUpdateOne {
	return NewJobOfferClient(jo.config).UpdateOne(jo)
}

// Unwrap unwraps the JobOffer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jo *JobOffer) Unwrap() *JobOffer {
	_tx, ok := jo.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobOffer is not a transactional entity")
	}
	jo.config.driver = _tx.drv
	return jo
}

// String implements the fmt.Stringer.
func (jo *JobOffer) String() string {
	var builder strings.Builder
	builder.WriteString("JobOffer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jo.ID))
	builder.WriteString("title=")
	builder.WriteString(jo.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(jo.Description)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(jo.URL)
	builder.WriteString(", ")
	builder.WriteString("file_url=")
	builder.WriteString(jo.FileURL)
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(jo.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jo.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JobOffers is a parsable slice of JobOffer.
type JobOffers []*JobOffer
