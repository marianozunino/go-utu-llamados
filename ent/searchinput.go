// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/marianozunino/go-utu-llamados/ent/searchinput"
)

// SearchInput is the model entity for the SearchInput schema.
type SearchInput struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Search holds the value of the "search" field.
	Search string `json:"search,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SearchInputQuery when eager-loading is set.
	Edges        SearchInputEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SearchInputEdges holds the relations/edges for other nodes in the graph.
type SearchInputEdges struct {
	// SearchResults holds the value of the search_results edge.
	SearchResults []*JobOffer `json:"search_results,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SearchResultsOrErr returns the SearchResults value or an error if the edge
// was not loaded in eager-loading.
func (e SearchInputEdges) SearchResultsOrErr() ([]*JobOffer, error) {
	if e.loadedTypes[0] {
		return e.SearchResults, nil
	}
	return nil, &NotLoadedError{edge: "search_results"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SearchInput) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case searchinput.FieldID:
			values[i] = new(sql.NullInt64)
		case searchinput.FieldSearch:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SearchInput fields.
func (si *SearchInput) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case searchinput.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			si.ID = int(value.Int64)
		case searchinput.FieldSearch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field search", values[i])
			} else if value.Valid {
				si.Search = value.String
			}
		default:
			si.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SearchInput.
// This includes values selected through modifiers, order, etc.
func (si *SearchInput) Value(name string) (ent.Value, error) {
	return si.selectValues.Get(name)
}

// QuerySearchResults queries the "search_results" edge of the SearchInput entity.
func (si *SearchInput) QuerySearchResults() *JobOfferQuery {
	return NewSearchInputClient(si.config).QuerySearchResults(si)
}

// Update returns a builder for updating this SearchInput.
// Note that you need to call SearchInput.Unwrap() before calling this method if this SearchInput
// was returned from a transaction, and the transaction was committed or rolled back.
func (si *SearchInput) Update() *SearchInputUpdateOne {
	return NewSearchInputClient(si.config).UpdateOne(si)
}

// Unwrap unwraps the SearchInput entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (si *SearchInput) Unwrap() *SearchInput {
	_tx, ok := si.config.driver.(*txDriver)
	if !ok {
		panic("ent: SearchInput is not a transactional entity")
	}
	si.config.driver = _tx.drv
	return si
}

// String implements the fmt.Stringer.
func (si *SearchInput) String() string {
	var builder strings.Builder
	builder.WriteString("SearchInput(")
	builder.WriteString(fmt.Sprintf("id=%v, ", si.ID))
	builder.WriteString("search=")
	builder.WriteString(si.Search)
	builder.WriteByte(')')
	return builder.String()
}

// SearchInputs is a parsable slice of SearchInput.
type SearchInputs []*SearchInput
